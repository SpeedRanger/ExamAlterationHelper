apply plugin: 'com.android.application'
apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.android.examalterationhelper"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        useLibrary 'org.apache.http.legacy'
        // Enabling multidex support.
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexKeepProguard file('proguard-multidex-rules.pro')
            testCoverageEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestUtil 'com.android.support.test:orchestrator:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-accessibility:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso.idling:idling-concurrent:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.2'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation 'com.squareup.okhttp:okhttp:2.5.0'
    implementation 'com.android.support:cardview-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
//    implementation 'com.airbnb.android:lottie:2.6.0-beta19'
//   implementation "com.airbnb.android:lottie:3.3.1"{ exclude group: 'com.android.support' }
    implementation 'com.android.support:multidex:1.0.3'

}

ext {
    SONAR_HOST = "http://localhost:9000/"
}

sonarqube() {
    properties {

        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-28/android.jar,"+
                "${project.buildDir}/intermediates/classes-jar/**/classes.jar"

        property "sonar.username", "admin"
        property "sonar.password", "admin"
        property "sonar.libraries", libraries
        property "sonar.binaries","/intermediates/classes/debug"
        property "sonar.java.binaries","${project.buildDir}/intermediates/classes/debug"
        property "sonar.java.libraries",libraries
        property "sonar.projectName", "ExamAlterationHelper"
        property "sonar.projectKey", "ExamAlterationHelper"
        property "sonar.tests", "./src/test/, ./src/androidTest/"
        property "sonar.test.inclusions", "**/*Test*/**"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "./src/main/"
        property "sonar.jacoco.reportPath",fileTree(dir:project.projectDir,includes:['**/*.exec'])
        property "sonar.jacoco.itReportPath", fileTree(dir:project.projectDir,includes:['**/*.ec'])
//        property "sonar.exclusions", '**/*Test*/**,' +
//                '*.json,' +
//                '**/*test*/**,' +
//                '**/.gradle/**,' +
//                '**/R.class'
        property "sonar.exclusions","build/**,**/*.png,*.iml,**/*generated*,"
        property "sonar.import_unknown_files",true
        property "sonar.android.lint.report","./build/outputs/lint-results.xml"
        property "sonar.host.url",SONAR_HOST
        property "sonar.java.test.binaries","${project.buildDir}/intermediates/classes/debug"
        property "sonar.java.test.libraries",libraries
    }
}

//tasks.sonarqube.dependsOn createTestReports

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group="Reporting"
    description="Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
//        xml.destination = "${buildDir}/jacocoTestReport.xml"
        html.enabled = true
//        html.destination = "${buildDir}/reports/jacoco"
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
                        '**/Lambda$*.class','**/Lambda.class','**/*Lambda.class','**/*Lambda*.class','**/*Lambda*.*','**/*Builder.*','**/*_MembersInjector.class',
                      '**/*_MembersInjector*.*','**/*Component*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            '*/*.exec', '**/*.ec'
    ])
}

//token
//e658896b705574221b4270047b642ac34c775489

//gradlew sonarqube command
//gradlew sonarqube -Dsonar.host.url=http://localhost:9000/ -Dsonar.login=e658896b705574221b4270047b642ac34c775489